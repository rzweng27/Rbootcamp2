tapply(growrate,list(lightpen,sal),mean)
require("car")
require("gmodels")
require("mosaic")
attach(coralgr)
require("car")
require("gmodels")
require("mosaic")
attach(coralgr)
install.packages("rmarkdown")
v<-c(1:8)
v
v<-seq(1,5,9,13)
v<-seq(1,13,4)
v
source('~/Documents/GitHub/R-Bootcamp-/rbootcamp.R')
get_heights<-function(samplesize=100){rnorm(samplesize,mean=69,sd=10)}
heights<-get_heights(samplesize=100)
print(heights)
get_heights<-function(sample_heights=100){
heights<-(rnorm(sample_heights,mean=69,sd=10))
average_heights<-mean(heights)
}
get_heights(100)
```
get_heights<-function(sample_heights=100){
heights<-(rnorm(sample_heights,mean=69,sd=10))
average_heights<-mean(heights)
return(average_heights)}
get_heights(100)
mean_heights_100<-rep(NA,1000)
for (i in 1:1000)
{mean_heights_100[i]<-get_heights(100)}
mean_heights_1000<-rep(NA,1000)
for (i in 1:1000)
{mean_heights_1000[i]<-get_heights(1000)}
bins<-seq(65,75,by=0.5)
counts_hundred<-hist(mean_heights_100,breaks=bins)$counts
counts_thousand<-hist(mean_heights_1000,breaks=bins)$counts
par(mfrow=c(1,1),mar=c(4,4,3,2))
barplot(rbind(counts_hundred,counts_thousand),col=c(2,4),beside=T,xlab="Average Height (inches)",ylab="Count")
legend(x=0,y=400,legend=c("n=100","n=1000"),col=c(2,4),lwd=4)
par(mfrow=c(1,1),mar=c(4,4,3,2))
barplot(rbind(counts_hundred,counts_thousand),col=c(2,4),beside=T,xlab="Average Height (inches)",names.arg=
seq(-10,9.5,by=1),ylab="Count")
legend(x=0,y=400,legend=c("n=100","n=1000"),col=c(2,4),lwd=4)
par(mfrow=c(1,1),mar=c(4,4,3,2))
barplot(rbind(counts_hundred,counts_thousand),col=c(2,4),beside=T,xlab="Average Height (inches)",names.arg=
seq(65,75,by=0.5),ylab="Count")
legend(x=0,y=400,legend=c("n=100","n=1000"),col=c(2,4),lwd=4)
par(mfrow=c(1,1),mar=c(4,4,3,2))
barplot(rbind(counts_hundred,counts_thousand),col=c(2,4),beside=T,xlab="Average Height (inches)",names.arg=
seq(65,74.5,by=0.5),ylab="Count")
legend(x=0,y=400,legend=c("n=100","n=1000"),col=c(2,4),lwd=4)
N0<-100
RR<-0.05
KK<-5000
ttMax<-200
NN<-matrix(NA,nrow=1,ncol=ttMax+1)
NN[1]<-N0 #set first value to initial conditions
for (tt in 1:ttMax){
NN[tt+1]<-NN[tt]exp(RR*(1-(NN[tt]/KK))}
for (tt in 1:ttMax){
NN[tt+1]<-NN[tt]exp(RR*(1-(NN[tt]/KK))}
for (tt in 1:ttMax){
NN[tt+1]<-NN[tt]*exp(RR*(1-(NN[tt]/KK))}
for (tt in 1:ttMax){
NN[tt+1]<-NN[tt]*exp(RR*(1-(NN[tt]/KK))}
for (tt in 1:ttMax){
NN[tt+1]<-NN[tt]*exp(RR*(1-(NN[tt]/KK)))}
plot(1:(ttMax+1),NN,xlab="time", ylab="N", col="blue"
)
RickerFun<-function(RR,N0,KK,ttMax){
NN[tt+1]<-NN[tt]*exp(RR*(1-(NN[tt]/KK)))
plot(1:(ttMax+1),NN,xlab="time", ylab="N", col="blue"
)
return(NN)
}
RickerFun(0.05,100,5000,200)
RickerFun(-0.05,100,5000,200)
RickerFun(-0.05,100,5000,200)
RickerFun(-0.5,100,5000,200)
RickerFun(-0.5,100,1000,200)
RickerFun(-1,100,1000,200)
RickerFun(-1,100,1000,200)
RickerFun(-1,100,1000,200)
RickerFun(0.5,100,1000,200)
RickerFun(-0.5,100,1000,200)
RickerFun(-0.5,100,1000,300)
RickerFun<-function(RR,N0,KK,ttMax){
#initialize variables to a vector of NA values
NN<-matrix(NA,nrow=1,ncol=ttMax+1)
NN[1]<-N0 #set first value to initial conditions
for (tt in 1:ttMax){
NN[tt+1]<-NN[tt]*exp(RR*(1-(NN[tt]/KK)))}
plot(1:(ttMax+1),NN,xlab="time", ylab="N", col="blue"
)
return(NN)
}
RickerFun(0.05,100,5000,200)
RickerFun(0.05,100,5000,300)
RickerFun(-0.5,100,5000,300)
RickerFun(-0.5,100,1000,300)
RickerFun(0.5,100,1000,300)
RickerFun(0.05,100,1000,300)
RickerFun(3,100,1000,300)
RickerFun(2,100,1000,300)
RickerFun(1.5,100,1000,300)
RickerFun(2,100,1000,300)
RickerFun(1.5,100,1000,300)
RickerFun(1.5,100,500,300)
RickerFun(2.5,100,500,300)
RickerFun(2,100,1000,300)
RickerFun(2.5,100,500,300)
RickerFun(3,100,500,300)
RickerFun(-0.5,100,1000,300)
RickerFun(0.05,100,1000,300)
RickerFun(2,100,1000,300)
RickerFun(2.5,100,500,300)
# Crazy, random-looking fluctuations (chaos).
RickerFun(3,100,500,300)
RickerFun(2,100,1000,300)
RickerFun<-function(RR,N0,KK,ttMax){
#initialize variables to a vector of NA values
NN<-matrix(NA,nrow=1,ncol=ttMax+1)
NN[1]<-N0 #set first value to initial conditions
for (tt in 1:ttMax){
NN[tt+1]<-NN[tt]*exp(RR*(1-(NN[tt]/KK)))}
plot(1:(ttMax+1),NN,xlab="time", ylab="N", col="blue",type='l'
)
return(NN)
}
RickerFun(2,100,1000,300)
RickerFun(2.5,100,500,300)
RickerFun(3,100,500,300)
growthRate<-c(-0.1,0.1,1.1,2,2.5,3)
RickerFun(-0.1,100,1000,300)
RickerFun(0.05,100,1000,300)
RickerFun(0.1,100,1000,300)
RickerFun(1.1,100,1000,300)
RickerFun(1.5,100,1000,300)
RickerFun(2,100,1000,300)
RickerFun(2.5,100,500,300)
RickerFun(2.3,100,500,300)
RickerFun(2.2,100,500,300)
RickerFun(1.5,100,1000,300)
RickerFun(0,100,1000,300)
RickerFun(-0.1,100,500,200)
RickerFun(0.1,100,500,200)
RickerFun(0,100,500,200)
RickerFun(2,100,500,200)
RickerFun(2.5,100,500,200)
RickerFun(2.3,100,500,200)
RickerFun(2.2,100,500,200)
RickerFun(2,100,500,200)
RickerFun(1.5,100,500,200)
RickerFun(1.6,100,500,200)
RickerFun(1.7,100,500,200)
RickerFun(1.8,100,500,200)
RickerFun(1.9,100,500,200)
RickerFun(2,100,500,200)
RickerFun(0,100,1000,200)
RickerFun(0.1,100,1000,200)
RickerFun(-0.1,100,1000,200)
RickerFun(2.2,100,1000,200)
RickerFun(2,100,1000,200)
RickerFun(2,100,1000,200)
RickerFun(2.5,100,1000,200)
RickerFun(2.2,100,1000,200)
for (ii in 1:6){
RickerOutput<-RickerFun(RR=growthRate[ii],100,500,200)
}
for (ii in 1:6){
RickerOutput<-RickerFun(RR=growthRate[ii],100,1000,200)
}
growthRate<-c(-0.1,0,0.1,2,2.5,3)
for (ii in 1:6){
RickerOutput<-RickerFun(RR=growthRate[ii],100,1000,200)
}
nnVec <- rep(NA, 1, length(growthRate))
for (ii in 1:length(growthRate)){
RickerOutput<-RickerFun(RR=growthRate[ii],100,1000,200)
}
for (ii in 1:length(growthRate)){
RickerOutput<-RickerFun(RR=growthRate[ii],100,1000,200)
nnVec[ii] <- RickerOutput[ii]
}
par(mfrow=c(2,3),mar=c(4,4,3,2))
for (ii in 1:length(growthRate)){
RickerOutput<-RickerFun(RR=growthRate[ii],100,1000,200)
}
par(mfrow=c(3,2),mar=c(4,4,3,2))
for (ii in 1:length(growthRate)){
RickerOutput<-RickerFun(RR=growthRate[ii],100,1000,200)
}
par(mfrow=c(3,2),mar=c(4,4,3,2))
for (ii in 1:length(growthRate)){
RickerOutput<-RickerFun(RR=growthRate[ii],100,1000,200)
}
N0<-20
KK<-1000
RR<-1.05
tt<-seq(1,100,by=1)
which[] (nVec>=500)
which[]<-(nVec>=500)
nVec<-rep(NA,1:length(tt))
nVec<-rep(NA,length(tt))
for (ii in 1:length(tt){nVec<-RickerFun(RR,N0,KK,tt[ii])}
for (ii in 1:length(tt)){nVec<-RickerFun(RR,N0,KK,tt[ii])}
which[]<-(nVec>=500)
which.min<-(nVec>=500)
View(nVec)
which.min(nVec>=500)
which.min(nVec<=500)
which.min(nVec>=500)
which.max(nVec>=500)
which.max(nVec>=500)
which(nVec>=500)
which(nVec>=500)[1]
rrVec<-seq(0.1,0.9,by=0.1)
N0<-20
KK<-1000
tt<-50
nnVec <- rep(NA, 1, length(rr))
nnVec <- rep(NA, 1, length(rrVec))
nnVec <- rep(NA, 1, length(rrVec))
RickerOutput <- RickerFun(N0, RR=rrVec[ii], KK,
tt)
for (ii in 1:length(rrVec)) {
RickerOutput <- RickerFun(N0, RR=rrVec[ii], KK,
tt)
nnVec[ii] <- logisticOutput[ttCollect]
}
RickerOutput <- RickerFun(N0, RR=rrVec[ii], KK,
tt)
nnVec[ii] <- RickerOutput[ttCollect]
}
for (ii in 1:length(rrVec)) {
RickerOutput <- RickerFun(N0, RR=rrVec[ii], KK,
tt)
nnVec[ii] <- RickerOutput[ttCollect]
}
for (ii in 1:length(rrVec)) {
RickerOutput <- RickerFun(N0, RR=rrVec[ii], KK,
tt)
nnVec[ii] <- RickerOutput[ii]
}
plot(rrVec, nnVec, xlab='Instantaneous growth rate, r_d',
ylab=paste('Population at time = ',as.character(ttCollect)),
type='b', col='red', main='Sensitivity to value of r_d')
plot(rrVec, nnVec, xlab='Instantaneous growth rate, r_d',
ylab=paste('Population at time = '),
type='b', col='red', main='Sensitivity to value of r_d')
par(1,1)
plot(rrVec, nnVec, xlab='Instantaneous growth rate, r_d',
ylab=paste('Population at time = '),
type='b', col='red', main='Sensitivity to value of r_d')
rrVec<-seq(0.1,0.9,by=0.1)
N0<-20
KK<-1000
tt<-50
# initialize vector with null values
nnVec <- rep(NA, 1, length(rrVec))
# loop over values of key parameter, and run model for each value
for (ii in 1:length(rrVec)) {
RickerOutput <- RickerFun(N0, RR=rrVec[ii], KK,
tt)
nnVec[ii] <- RickerOutput[ii]
}
# plot the results
par(1,1)
plot(rrVec, nnVec, xlab='Instantaneous growth rate, r_d',
ylab=paste('Population at time = '),
type='b', col='red', main='Sensitivity to value of r_d')
rrVec<-seq(0.1,0.9,by=0.1)
N0<-20
KK<-1000
tt<-50
# initialize vector with null values
nnVec <- rep(NA, 1, length(rrVec))
# loop over values of key parameter, and run model for each value
for (ii in 1:length(rrVec)) {
RickerOutput <- RickerFun(N0, RR=rrVec[ii], KK,
tt)
nnVec[ii] <- RickerOutput[ii]
}
# plot the results
par(mfrow=c(1,1),mar=c(4,4,3,2))
plot(rrVec, nnVec, xlab='Instantaneous growth rate, r_d',
ylab=paste('Population at time = '),
type='b', col='red', main='Sensitivity to value of r_d')
N0<-100
RR<-0.05
KK<-5000
ttMax<-200
#initialize variables to a vector of NA values
NN<-matrix(NA,nrow=1,ncol=ttMax+1)
NN[1]<-N0 #set first value to initial conditions
#3 Perform Calculations
#use a loop to iterate the model the desired number of times
for (tt in 1:ttMax){
NN[tt+1]<-NN[tt]*exp(RR*(1-(NN[tt]/KK)))}
#4 Plot the results
plot(1:(ttMax+1),NN,xlab="time", ylab="N", col="blue"
)
#5 Write as a function
RickerFun<-function(RR,N0,KK,ttMax){
#initialize variables to a vector of NA values
NN<-matrix(NA,nrow=1,ncol=ttMax+1)
NN[1]<-N0 #set first value to initial conditions
for (tt in 1:ttMax){
NN[tt+1]<-NN[tt]*exp(RR*(1-(NN[tt]/KK)))}
plot(1:(ttMax+1),NN,xlab="time", ylab="N", col="blue",type='l'
)
return(NN)
}
#Example
RickerFun(-0.5,100,5000,300)
```
(b) Explore the dynamics of the model. Try to find combinations of parameter values that yield
the following patterns:
• Population decreases to n = 0.
• Population approaches stable equilibrium at n
∗ = K, without oscillations.
• Decaying oscillations around n
∗ = K.
• Persistent, regular oscillations.
• Crazy, random-looking fluctuations (chaos).
Which parameter is the key driver of these patterns?
```{r}
#Population decreases to n=0. Must have a negative RR
RickerFun(-0.1,100,1000,200)
#Population approaches stable equilibrium at n∗ = K, without oscillations. Must have a positive RR.
RickerFun(0.1,100,1000,200)
RickerFun(0,100,1000,200)
#Decaying oscillations around n∗ = K.
RickerFun(2,100,1000,200)
#Persistent, regular oscillations.
RickerFun(2.2,100,1000,200)
# Crazy, random-looking fluctuations (chaos).
RickerFun(3,100,1000,200)
#The Key parameter to change is RR (r)
```
(c) Choose six interesting values of this parameter. Write a script that makes an array of six plots
showing the model dynamics for each of these values.
```{r}
# Define parameter values; use a vector to hold a range of values for the parameter(s) you wish to vary.
growthRate<-c(-0.1,0,0.1,2,2.5,3)
par(mfrow=c(3,2),mar=c(4,4,3,2))
for (ii in 1:length(growthRate)){
RickerOutput<-RickerFun(RR=growthRate[ii],100,1000,200)
}
```
(d) Imagine n0 = 20 and K = 1000 for a certain population of deer that is growing according to
the Ricker model. You are a wildlife manager, and are concerned about how long it will take
for the population to reach half of its carrying capacity. That is, you want to know tK/2
, the
first year that nt ≥ K/2. Suppose your output time series is called nVec. Write an R command
that will determine the index of the first element of nVec that is ≥ K/2.
```{r}
N0<-20
KK<-1000
RR<-1.05
tt<-seq(1,100,by=1)
nVec<-rep(NA,length(tt))
for (ii in 1:length(tt)){nVec<-RickerFun(RR,N0,KK,tt[ii])}
}
which(nVec>=500)[1]
```
(e) Write a script that runs the necessary simulations and collects the necessary data to plot how
tK/2 depends on r, for the range of r from 0.1 to 0.9.
```{r}
#initialize parameters
rrVec<-seq(0.1,0.9,by=0.1)
N0<-20
KK<-1000
tt<-50
# initialize vector with null values
nnVec <- rep(NA, 1, length(rrVec))
# loop over values of key parameter, and run model for each value
for (ii in 1:length(rrVec)) {
RickerOutput <- RickerFun(N0, RR=rrVec[ii], KK,
tt)
nnVec[ii] <- RickerOutput[ii]
}
# plot the results
par(mfrow=c(1,1),mar=c(4,4,3,2))
plot(rrVec, nnVec, xlab='Instantaneous growth rate, r_d',
ylab=paste('Population at time = '),
type='b', col='red', main='Sensitivity to value of r_d')
```
(f) Write pseudo-code to do a joint sensitivity analysis for two parameters. That is, choose a vector
of values you’d like to consider for both r and K, and choose a simple output from your model
(e.g. population size at t = 10). Run the model for all possible combinaioins of these values
and collect the results in a matrix with appropriate dimensions. Plot the results in some way.
Hint: the straight-forward way to do this uses a ‘nested loop’.
```{r}
```
setwd("/Users/reginazweng/Documents/GitHub/Rbootcamp2")
z=read.table("pheno.sim.2014.txt",header=TRUE)
zz=read.table("phenotype.txt",header=TRUE)
pheno=zz$glucose_mmolperL
hist(pheno)
genofactor=factor(snps["rs218206_G",])
sig_snps<-subset(pvals,pvals<0.05) #pull out the snps with P-vals<0.05
snpsDataFrame=read.table('hapmap.txt',header=TRUE)
snps=as.matrix(snpsDataFrame)
freq=sum(testSNP,na.rm=TRUE)/(2.0*sum(!is.na(testSNP)))
testSNP=snps["rs6717613_A",]
table(testSNP)
testSNP==1
length(testSNP)
is.na(testSNP) #tests whether there is missing data
het=sum(testSNP==1)/length(testSNP)  # Note how this fails
het=sum(testSNP==1,na.rm=TRUE)/sum(!is.na(testSNP))  # but this doesn't
freq=sum(testSNP,na.rm=TRUE)/(2.0*sum(!is.na(testSNP)))
calc_freq=function(x){
return(sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x))))
} #calculates frequency of allele
calc_het=function(x){
return(sum(x==1,na.rm=TRUE)/(sum(!is.na(x))))
}#function that calculates heterozygosity
freq=apply(snps,1,calc_freq)
het=apply(snps,1,calc_het)
plot(freq,het,xlab="Frequency",ylab="Heterozygosity")  # Scatter plot
p=seq(0,0.5,by=0.05)   # Set-up a vector with a sequence of allele frequencies
points(p,2*p*(1-p),type="l",col=2) # Plot the HW expectation as a line in red
compute_chisquare=function(x){
freq=sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x)))
cnt0=sum(x==0,na.rm=TRUE)
cnt1=sum(x==1,na.rm=TRUE)
cnt2=sum(x==2,na.rm=TRUE)
obscnts=c(cnt0,cnt1,cnt2)
#print(obscnts)
n=sum(obscnts)
expcnts=c((1-freq)^2,2*freq*(1-freq),freq^2)*n
chisq=sum((obscnts-expcnts)^2/expcnts)
return(chisq)
}
chisqs=apply(snps,1,compute_chisquare)
plot(chisqs,chisqs2)
cor.test(chisqs,chisqs2)
pvals=pchisq(chisqs,1,lower.tail=FALSE)
signifthres<-0.05
sum(pvals<signifthres)
mean(pvals<signifthres)
sig_snps<-subset(pvals,pvals<0.05) #pull out the snps with P-vals<0.05
sig_snp_ids<-names(sig_snps)
sig_geno<-snps[sig_snp_ids,]
zz=read.table("phenotype.txt",header=TRUE)
pheno=zz$glucose_mmolperL
length(pheno)
hist(pheno)
genofactor=factor(snps["rs218206_G",])
m=lm(pheno~genofactor)
summary(m)
plot(pheno~factor(snps["rs218206_G",]))  # Note: plot automatically produces a boxplot
calc_Ftest_pval=function(geno){
m=lm(pheno~factor(geno))
fstat=summary(m)$fstatistic
pval=pf(fstat[1],fstat[2],fstat[3],lower.tail=FALSE)
return(pval)
}
pvals=apply(snps,1,calc_Ftest_pval)
plot(-log10(pvals),pch=16,main="Genome-wide association scan results")
abline(h=5,col=2)
log_pval<-(-log10(pvals))
best_hit_snp<-names(subset(log_pval,log_pval>5))
subset(log_pval,log_pval>5)
m=lm(pheno~factor(snps[best_hit_snp,]))
plot(pheno~factor(snps[best_hit_snp,]))  # Note: plot automatically produces a boxplot
summary(m)
quantile(pheno)
sort_pheno[16] #gives back the 16th smallest value and the 15 smaller values (or 25% of individuals) all fall below this.
sort_pheno<-sort(pheno)
sort_pheno[16] #gives back the 16th smallest value and the 15 smaller values (or 25% of individuals) all fall below this.
sort_pheno[15] #gives back the 16th smallest value and the 15 smaller values (or 25% of individuals) all fall below this.
quantile(sort_pheno)
sort_pheno[15] #gives back the 16th smallest value and the 15 smaller values (or 25% of individuals) all fall below this.
zz=snpsDataFrame=read.table('phenotype.txt',header=TRUE)
pheno=zz$glucose_mmolperL
sort_pheno<-sort(pheno)
sort_pheno[15] #gives back the 16th smallest value and the 15 smaller values (or 25% of individuals) all fall below this.
quantile(sort_pheno)
quantile(sort_pheno)
summary(pheno)
sort_pheno<-sort(pheno)
sort_pheno[16]
sort_pheno[15]
plot(density(pheno))
abline(v=4.769)
plot(density(pheno))
abline(v=4.769)
abline(v=7.355)
